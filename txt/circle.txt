>>> import sympy as s
>>> x1 = s.Symbol('x1')
>>> x2 = s.Symbol('x2')
>>> x3 = s.Symbol('x3')
>>> x3 = s.Symbol('x3')
>>> y1 = s.Symbol('y1')
>>> y2 = s.Symbol('y2')
>>> y3 = s.Symbol('y3')
>>> x = s.Symbol('x')
>>> y = s.Symbol('y')
>>> aM = s.Matrix( ((x1,y1,1),(x2,y2,1),(x3,y3,1)) )
>>> a = aM.det()
>>> a
x1*y2 - x1*y3 - x2*y1 + x2*y3 + x3*y1 - x3*y2
>>> dM = s.Matrix( ((x1*x1+y1*y1,y1,1),(x2*x2+y2*y2,y2,1),(x3*x3+y3*y3,y3,1)) )
>>> d = -dM.det()
>>> d
-x1**2*y2 + x1**2*y3 + x2**2*y1 - x2**2*y3 - x3**2*y1 + x3**2*y2 - y1**2*y2 + y1**2*y3 + y1*y2**2 - y1*y3**2 - y2**2*y3 + y2*y3**2
>>> eM = s.Matrix( ((x1*x1+y1*y1,x1,1),(x2*x2+y2*y2,x2,1),(x3*x3+y3*y3,x3,1)) )
>>> e = eM.det()
>>> e
x1**2*x2 - x1**2*x3 - x1*x2**2 + x1*x3**2 - x1*y2**2 + x1*y3**2 + x2**2*x3 - x2*x3**2 + x2*y1**2 - x2*y3**2 - x3*y1**2 + x3*y2**2
>>> x0 = -d / (2*a)
>>> y0 = -e / (2*a)

def circle( x1,y1, x2,y2, x3,y3 ):
    a = x1*y2 - x1*y3 - x2*y1 + x2*y3 + x3*y1 - x3*y2
    d = -x1**2*y2 + x1**2*y3 + x2**2*y1 - x2**2*y3 - x3**2*y1 + x3**2*y2 - y1**2*y2 + y1**2*y3 + y1*y2**2 - y1*y3**2 - y2**2*y3 + y2*y3**2
    e = x1**2*x2 - x1**2*x3 - x1*x2**2 + x1*x3**2 - x1*y2**2 + x1*y3**2 + x2**2*x3 - x2*x3**2 + x2*y1**2 - x2*y3**2 - x3*y1**2 + x3*y2**2
    x0 = -d/(2*a)
    y0 = -e/(2*a)
    return ( x0, y0, s.sqrt( (x1-x0)**2+(y1-y0)**2 ) )
    